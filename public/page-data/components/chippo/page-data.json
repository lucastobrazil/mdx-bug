{"componentChunkName":"component---src-templates-layout-with-sidebar-js","path":"/components/chippo/","webpackCompilationHash":"","result":{"data":{"mdx":{"frontmatter":{"title":"Chip","subTitle":"Compact elements that represent an input, attribute, or action.","component":"Chip"},"fields":{"slug":"/components/chippo/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* @jsx mdx */\nvar StatefulChip = function StatefulChip(_ref) {\n  var text = _ref.text;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isDisplayed = _React$useState2[0],\n      setDisplay = _React$useState2[1];\n\n  var handleDismiss = function handleDismiss() {\n    setDisplay(false);\n    setTimeout(function () {\n      setDisplay(true);\n    }, 2000);\n  };\n\n  return isDisplayed && mdx(Chip, {\n    mr: 1,\n    text: text\n  });\n};\n\nvar _frontmatter = {\n  \"title\": \"Chip\",\n  \"subTitle\": \"Compact elements that represent an input, attribute, or action.\",\n  \"component\": \"Chip\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Chip = makeShortcode(\"Chip\");\nvar layoutProps = {\n  StatefulChip: StatefulChip,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref2) {\n  var components = _ref2.components,\n      props = _objectWithoutProperties(_ref2, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Chip, {\n    mr: 1,\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    mr: 1,\n    text: \"Vacations\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    mr: 1,\n    text: \"Summer\",\n    mdxType: \"Chip\"\n  }), mdx(\"h2\", null, \"Dismissable\"), mdx(StatefulChip, {\n    text: \"Jenny Johnson\",\n    mdxType: \"StatefulChip\"\n  }), mdx(StatefulChip, {\n    text: \"Shania Twain\",\n    mdxType: \"StatefulChip\"\n  }), mdx(StatefulChip, {\n    text: \"John Legend\",\n    mdxType: \"StatefulChip\"\n  }), mdx(\"h2\", null, \"Search Terms:\"), mdx(Chip, {\n    mr: 1,\n    text: \"Adele\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    mr: 1,\n    text: \"Patha du Prince\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    mr: 1,\n    text: \"Queen\",\n    mdxType: \"Chip\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/components/chippo/"}}}